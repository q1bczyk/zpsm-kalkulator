import {
    resetOperation,
    firstChar,
    resultOperation,
    blockDoubleOperation,
    blockDoubleChar,
    expOperation,
  } from '../_functions/funtions';  
  
  const darkColor = '#6E6E6E';
  const orangeColor = '#DF8D00';
  const lightColor = '#878787'

  export const createButtonsData = (mathExpression, setMath, setPoint, setNumberActive, isNumberActive, pointUse) =>[
    { 
        label: "(", 
        onPress: () => setMath(firstChar(mathExpression, '(')), 
        background: darkColor,
        alwaysDisable: false,
        doubleBox: false, 
    },
    { 
        label: ")", 
        onPress: () => setMath(resetOperation()), 
        background: darkColor,
        alwaysDisable: false,
        doubleBox: false,  
    },
    { 
        label: "mc", 
        onPress: () => setMath(resetOperation()), 
        background: darkColor,
        alwaysDisable: false,
        doubleBox: false,  
    },
    { 
        label: "m+", 
        onPress: () => setMath(resetOperation()), 
        background: darkColor,
        alwaysDisable: false,
        doubleBox: false,  
    },
    { 
        label: "m-", 
        onPress: () => setMath(resetOperation()), 
        background: darkColor,
        alwaysDisable: false,
        doubleBox: false,  
    },
    { 
        label: "mr", 
        onPress: () => setMath(resetOperation()), 
        background: darkColor,
        alwaysDisable: false,
        doubleBox: false,  
    },
    { 
        label: "+/-", 
        onPress: () => setMath(resetOperation()), 
        background: darkColor,
        alwaysDisable: false,
        doubleBox: false,  
    },
    { 
        label: "%", 
        onPress: () => setMath(resetOperation()), 
        background: darkColor,
        alwaysDisable: false,
        doubleBox: false,  
    },
    { 
        label: "AC", 
        onPress: () => setMath(resetOperation(setNumberActive, setPoint)), 
        background: darkColor,
        alwaysDisable: true,
        doubleBox: false, 
    },
    { 
        label: "", 
        onPress: () => setMath(resetOperation()), 
        background: darkColor,
        alwaysDisable: false,
        doubleBox: true, 
    },
    { 
        label: "÷", 
        onPress: () => setMath(blockDoubleOperation(mathExpression, setPoint, '÷')),
        background: orangeColor,
        alwaysDisable: true,
        doubleBox: false, 
    },

    /////////////////////////////////////////////////

    { 
        label: "2ⁿᵈ", 
        onPress: () => setMath(resetOperation()), 
        background: darkColor,
        alwaysDisable: false,
        doubleBox: false, 
    },
    { 
        label: "x²", 
        onPress: () => setMath(expOperation('2', mathExpression, setNumberActive)), 
        background: darkColor,
        alwaysDisable: false,
        doubleBox: false,  
    },
    { 
        label: "x³", 
        onPress: () => setMath(expOperation('3', mathExpression, setNumberActive)),
        background: darkColor,
        alwaysDisable: false,
        doubleBox: false,  
    },
    { 
        label: "xⁿ", 
        onPress: () => {setMath(mathExpression + '^'); setNumberActive(true)}, 
        background: darkColor,
        alwaysDisable: false,
        doubleBox: false,  
    },
    { 
        label: "eⁿ", 
        onPress: () => setMath(firstChar(mathExpression, isNumberActive, setNumberActive, 'e^'), setNumberActive(true)), 
        background: darkColor,
        alwaysDisable: false,
        doubleBox: false,  
    },
    { 
        label: "10ⁿ", 
        onPress: () => setMath(firstChar(mathExpression, isNumberActive, setNumberActive, '10^'), setNumberActive(true)),
        background: darkColor,
        alwaysDisable: false,
        doubleBox: false,  
    },
    { 
        label: "7", 
        onPress: () => setMath(firstChar(mathExpression, isNumberActive, setNumberActive, '7')), 
        background: lightColor,
        alwaysDisable: true,
        doubleBox: false,  
    },
    { 
        label: "8", 
        onPress: () => setMath(firstChar(mathExpression, isNumberActive, setNumberActive, '8')),  
        background: lightColor,
        alwaysDisable: true,
        doubleBox: false,  
    },
    { 
        label: "9", 
        onPress: () => setMath(firstChar(mathExpression, isNumberActive, setNumberActive, '9')), 
        background: lightColor,
        alwaysDisable: true,
        doubleBox: false, 
    },
    { 
        label: "x", 
        onPress: () => setMath(blockDoubleOperation(mathExpression, setPoint, 'x')),
        background: orangeColor,
        alwaysDisable: true,
        doubleBox: false, 
    },

    /////////////////////////////////////////////////

    { 
        label: "¹/ₓ", 
        onPress: () => setMath(resetOperation()), 
        background: darkColor,
        alwaysDisable: false,
        doubleBox: false, 
    },
    { 
        label: "²√x", 
        onPress: () => setMath(resetOperation()), 
        background: darkColor,
        alwaysDisable: false,
        doubleBox: false,  
    },
    { 
        label: "³√x", 
        onPress: () => setMath(resetOperation()), 
        background: darkColor,
        alwaysDisable: false,
        doubleBox: false,  
    },
    { 
        label: "ⁿ√x", 
        onPress: () => setMath(resetOperation()), 
        background: darkColor,
        alwaysDisable: false,
        doubleBox: false,  
    },
    { 
        label: "ln", 
        onPress: () => setMath(resetOperation()), 
        background: darkColor,
        alwaysDisable: false,
        doubleBox: false,  
    },
    { 
        label: "log₁₀", 
        onPress: () => setMath(resetOperation()), 
        background: darkColor,
        alwaysDisable: false,
        doubleBox: false,  
    },
    { 
        label: "4", 
        onPress: () => setMath(firstChar(mathExpression, isNumberActive, setNumberActive, '4')), 
        background: lightColor,
        alwaysDisable: true,
        doubleBox: false,  
    },
    { 
        label: "5", 
        onPress: () => setMath(firstChar(mathExpression, isNumberActive, setNumberActive, '5')),
        background: lightColor,
        alwaysDisable: true,
        doubleBox: false,  
    },
    { 
        label: "6", 
        onPress: () => setMath(firstChar(mathExpression, isNumberActive, setNumberActive, '6')),
        background: lightColor,
        alwaysDisable: true,
        doubleBox: false, 
    },
    { 
        label: "-", 
        onPress: () => setMath(blockDoubleOperation(mathExpression, setPoint, '-')), 
        background: orangeColor,
        alwaysDisable: true,
        doubleBox: false, 
    },

    /////////////////////////////////////////////////

    { 
        label: "x!", 
        onPress: () => setMath(blockDoubleChar(mathExpression, setPoint, pointUse, '!')), 
        background: darkColor,
        alwaysDisable: false,
        doubleBox: false, 
    },
    { 
        label: "sin", 
        onPress: () => setMath(resetOperation()), 
        background: darkColor,
        alwaysDisable: false,
        doubleBox: false,  
    },
    { 
        label: "cos", 
        onPress: () => setMath(resetOperation()), 
        background: darkColor,
        alwaysDisable: false,
        doubleBox: false,  
    },
    { 
        label: "tan", 
        onPress: () => setMath(resetOperation()), 
        background: darkColor,
        alwaysDisable: false,
        doubleBox: false,  
    },
    { 
        label: "e", 
        onPress: () => setMath(resetOperation()), 
        background: darkColor,
        alwaysDisable: false,
        doubleBox: false,  
    },
    { 
        label: "EE", 
        onPress: () => setMath(resetOperation()), 
        background: darkColor,
        alwaysDisable: false,
        doubleBox: false,  
    },
    { 
        label: "1", 
        onPress: () => setMath(firstChar(mathExpression, isNumberActive, setNumberActive, '1')), 
        background: lightColor,
        alwaysDisable: true,
        doubleBox: false,  
    },
    { 
        label: "2", 
        onPress: () => setMath(firstChar(mathExpression, isNumberActive, setNumberActive, '2')),
        background: lightColor,
        alwaysDisable: true,
        doubleBox: false,  
    },
    { 
        label: "3", 
        onPress: () => setMath(firstChar(mathExpression, isNumberActive, setNumberActive, '3')),
        background: lightColor,
        alwaysDisable: true,
        doubleBox: false, 
    },
    { 
        label: "+", 
        onPress: () => setMath(blockDoubleOperation(mathExpression, setPoint, '+')), 
        background: orangeColor,
        alwaysDisable: true,
        doubleBox: false, 
    },
    
    /////////////////////////////////////////////////

    { 
        label: "Rad", 
        onPress: () => setMath(resetOperation()), 
        background: darkColor,
        alwaysDisable: false,
        doubleBox: false, 
    },
    { 
        label: "sinh", 
        onPress: () => setMath(resetOperation()), 
        background: darkColor,
        alwaysDisable: false,
        doubleBox: false,  
    },
    { 
        label: "cosh", 
        onPress: () => setMath(resetOperation()), 
        background: darkColor,
        alwaysDisable: false,
        doubleBox: false,  
    },
    { 
        label: "tanh", 
        onPress: () => setMath(resetOperation()), 
        background: darkColor,
        alwaysDisable: false,
        doubleBox: false,  
    },
    { 
        label: "π", 
        onPress: () => setMath(resetOperation()), 
        background: darkColor,
        alwaysDisable: false,
        doubleBox: false,  
    },
    { 
        label: "Rand", 
        onPress: () => setMath(resetOperation()), 
        background: darkColor,
        alwaysDisable: false,
        doubleBox: false,  
    },
    { 
        label: "0", 
        onPress: () => setMath(firstChar(mathExpression, isNumberActive, setNumberActive, '0')), 
        background: lightColor,
        alwaysDisable: true,
        doubleBox: true,  
    },
    { 
        label: ",", 
        onPress: () => setMath(blockDoubleChar(mathExpression, setPoint, pointUse, ',')), 
        background: lightColor,
        alwaysDisable: true,
        doubleBox: false,
    },
    { 
        label: "=", 
        onPress: () => setMath(resultOperation(mathExpression, setPoint, setNumberActive)), 
        background: orangeColor,
        alwaysDisable: true,
        doubleBox: false, 
    },

  ];